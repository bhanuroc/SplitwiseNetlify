{"version":3,"sources":["classes/expense.js","utils/splitwise.js","Component/Home.js","App.js","reportWebVitals.js","index.js"],"names":["Expense","p1","p2","val","this","person1","person2","amount","upheapify","heap","idx","pi","Math","floor","first","temp","downheapify","lc","rc","length","largest","push_heap","key","ob","push","pop_heap","i","pop","heap_top","Home","useState","name","setName","allNames","setAllNames","flag","setFlag","finalValues","setFinalValues","items","setItems","outputList","setOutputList","inputGraphData","setInputGraphData","inputGraphConfig","setInputGraphConfig","outputGraphData","setOutputGraphData","handleFinalChange","event","target","value","generateNodes","map","item","id","generateLinks","source","generateOutputLinks","className","TextField","label","variant","disabled","onChange","Button","color","onClick","preventDefault","previous","index","style","Grid","container","xs","md","textAlign","TableContainer","component","Paper","Table","aria-label","TableHead","TableRow","TableCell","align","TableBody","row","scope","FormControl","InputLabel","Select","MenuItem","type","placeholder","InputLabelProps","shrink","size","e","alert","console","log","data","nodes","links","freezeAllDragEvents","nodeHighlightBehavior","node","highlightStrokeColor","fontSize","link","highlightColor","renderLabel","labelProperty","directed","height","width","input","parseInt","output","transactions","net_balance","positive","negative","p","result","exp","second","min","splitwise","Object","keys","config","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e140c90e.chunk.js","sourcesContent":["export default class Expense {\r\n  constructor(p1, p2, val) {\r\n    this.person1 = p1;\r\n    this.person2 = p2;\r\n    this.amount = val;\r\n  }\r\n}","\r\nimport Expense from \"../classes/expense\";\r\nfunction upheapify(heap,idx){\r\n\tif(idx == 0) return;\r\n\tvar pi=Math.floor((idx-1)/2);\r\n\tif(heap[pi].first<heap[idx].first){\r\n\t\tvar temp=heap[pi];\r\n\t\theap[pi]=heap[idx];\r\n\t\theap[idx]=temp;\r\n\t\tupheapify(heap,pi);\r\n\t}else{\r\n\t\treturn;\r\n\t}\r\n}\r\n\r\nfunction downheapify(heap,idx){\r\n\tvar lc=2*idx+1;\r\n\tvar rc=2*idx+2;\r\n\tif(lc>=heap.length && rc>=heap.length) return;\r\n\tvar largest=idx;\r\n\tif(lc<heap.length && heap[lc].first>heap[largest].first){\r\n\t\tlargest=lc;\r\n\t}\r\n\tif(rc<heap.length && heap[rc].first>heap[largest].first){\r\n\t\tlargest=rc;\r\n\t}\r\n\tif(largest == idx) return;\r\n\tvar temp=heap[largest];\r\n\theap[largest]=heap[idx];\r\n\theap[idx]=temp;\r\n\tdownheapify(heap,largest);\r\n\r\n\r\n}\r\n\r\nfunction push_heap(heap,key,val){\r\n\tvar ob={\"first\":key,\"second\":val}\r\n\theap.push(ob);\r\n\tupheapify(heap,heap.length-1);\r\n}\r\n\r\nfunction pop_heap(heap){\r\n\tif(heap.length == 0) return 0;\r\n\tvar i=heap.length-1;\r\n\tvar temp=heap[0];\r\n\theap[0]=heap[i];\r\n\theap[i]=temp;\r\n\theap.pop();\r\n\tdownheapify(heap,0);\r\n}\r\n\r\nfunction heap_top(heap){\r\n\tif(heap.length == 0) return {};\r\n\treturn heap[0];\r\n}\r\n\r\n\r\n\r\nexport function splitwise(transactions){\r\n   // transactions array stores objects of Expense class\r\n   var net_balance={};  //hashmap\r\n   for(var i=0;i<transactions.length;i++){\r\n   \t var e=transactions[i];\r\n   \t if(e.person1 in net_balance){\r\n   \t \tnet_balance[e.person1]+=e.amount;\r\n   \t }else{\r\n   \t \tnet_balance[e.person1]=e.amount;\r\n   \t }\r\n   \t if(e.person2 in net_balance){\r\n   \t \tnet_balance[e.person2]-=e.amount;\r\n   \t }else{\r\n   \t \tnet_balance[e.person2]=-e.amount;\r\n   \t }\r\n\r\n     \r\n\r\n   }\r\n\r\n   var positive=[];\r\n   var negative=[];\r\n   for(const p in net_balance){\r\n   \tif(net_balance[p]>0){\r\n   \t\tpush_heap(positive,net_balance[p],p);\r\n   \t}else{\r\n   \t\tpush_heap(negative,-1*net_balance[p],p);\r\n   \t}\r\n   }\r\n\r\n   var result=[];\r\n   while(positive.length>0){\r\n   \tvar p1=heap_top(positive);\r\n   \tvar p2=heap_top(negative);\r\n   \tpop_heap(positive);\r\n   \tpop_heap(negative);\r\n   \tlet exp=new Expense(p2.second,p1.second,Math.min(p1.first,p2.first));\r\n   \tresult.push(exp);\r\n   \tif(p1.first>p2.first){\r\n   \t\tpush_heap(positive,p1.first-p2.first,p1.second);\r\n   \t}else if(p1.first<p2.first){\r\n        push_heap(negative,p2.first-p1.first,p2.second);\r\n   \t}\r\n   }\r\n\r\n   return result;\r\n}","import React, { useState, } from 'react'\r\nimport {\r\n  TextField,\r\n  Button,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  TableCell,\r\n  TableContainer,\r\n  Paper,\r\n  Table,\r\n  TableHead,\r\n  TableRow,\r\n  TableBody,\r\n  Grid,\r\n} from '@material-ui/core'\r\nimport { Graph } from 'react-d3-graph'\r\nimport Expense from '../classes/expense'\r\nimport { splitwise } from '../utils/splitwise'\r\n\r\nconst Home = () => {\r\n  const [name, setName] = useState('')\r\n  const [allNames, setAllNames] = useState([])\r\n  const [flag, setFlag] = useState(false)\r\n  const [finalValues, setFinalValues] = useState({\r\n    \"person1\": \"\",\r\n    \"person2\": \"\",\r\n    \"amount\": \"\"\r\n  })\r\n  const [items, setItems] = useState([])\r\n  const [outputList, setOutputList] = useState([])\r\n\r\n  const { person1, person2, amount } = finalValues;\r\n\r\n  const [inputGraphData, setInputGraphData] = useState({})\r\n  const [inputGraphConfig, setInputGraphConfig] = useState({})\r\n\r\n  const [outputGraphData, setOutputGraphData] = useState({})\r\n\r\n  const handleFinalChange = name => event => {\r\n    setFinalValues({ ...finalValues, [name]: event.target.value })\r\n  }\r\n\r\n\r\n  const handleChange = (event) => {\r\n    setName(event.target.value)\r\n  }\r\n\r\n  const addParticipant = event => {\r\n    event.preventDefault();\r\n    setAllNames(previous => [{ name }, ...previous])\r\n    setName('')\r\n  }\r\n\r\n  const listOfNames = () => {\r\n    return (\r\n      <div className=\"allnames\">\r\n        <h3>Names</h3>\r\n\r\n        {allNames.map((item, index) => (\r\n          <h4 style={{ color: \"#3f3f3f\" }} key={index}> { item.name}</h4>\r\n        ))\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n\r\n  const handleOpenForm = () => {\r\n    setFlag(!false)\r\n  }\r\n\r\n  const myForm = () => {\r\n    function addValues() {\r\n      if ((finalValues['person1'] !== \"\") && (finalValues['person2'] !== \"\") && (finalValues['amount'] !== \"\")) {\r\n        setItems([...items, finalValues])\r\n      } else {\r\n        alert(\"Enter all Fields\")\r\n      }\r\n      setFinalValues({\r\n        ...finalValues,\r\n        \"person1\": \"\",\r\n        \"person2\": \"\",\r\n        \"amount\": \"\"\r\n      })\r\n    }\r\n    return (\r\n      <TableContainer component={Paper} className=\"table\">\r\n        <Table aria-label=\"simple table\">\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell align=\"center\">Payer</TableCell>\r\n              <TableCell align=\"center\">Payee</TableCell>\r\n              <TableCell align=\"center\">Amount</TableCell>\r\n              <TableCell align=\"center\">Add</TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {items.length > 0 && items.map((row) => (\r\n              <TableRow key={row.name}>\r\n                <TableCell component=\"th\" align=\"center\" scope=\"row\">\r\n                  {row.person1}\r\n                </TableCell>\r\n                <TableCell align=\"center\">{row.person2}</TableCell>\r\n                <TableCell align=\"center\">{row.amount}</TableCell>\r\n              </TableRow>\r\n            ))}\r\n            <TableRow>\r\n              <TableCell align=\"center\">\r\n                <FormControl>\r\n                  <InputLabel>Payer</InputLabel>\r\n                  <Select value={person1} onChange={handleFinalChange(\"person1\")}>\r\n                    {allNames.map(item => (\r\n                      <MenuItem value={item.name} >{item.name}</MenuItem>\r\n                    ))\r\n                    }\r\n                  </Select>\r\n                </FormControl>\r\n              </TableCell>\r\n\r\n\r\n              <TableCell align=\"center\">\r\n                <FormControl>\r\n                  <InputLabel>Payee</InputLabel>\r\n                  <Select value={person2} onChange={handleFinalChange(\"person2\")}>\r\n                    {allNames.map(item =>\r\n                    ((person1 !== item.name) ? <MenuItem value={item.name}>{item.name}</MenuItem> : <></>\r\n                    ))\r\n                    }\r\n                  </Select>\r\n                </FormControl>\r\n              </TableCell>\r\n\r\n\r\n              <TableCell align=\"center\">\r\n                <FormControl>\r\n                  <TextField\r\n                    id=\"standard-number\"\r\n                    label=\"Amount\"\r\n                    type=\"number\"\r\n                    value={amount}\r\n                    placeholder=\"Emter Amount\"\r\n                    onChange={handleFinalChange(\"amount\")}\r\n                    InputLabelProps={{\r\n                      shrink: true,\r\n                    }}\r\n                  />\r\n                </FormControl>\r\n              </TableCell>\r\n\r\n\r\n              <TableCell align=\"center\">\r\n                <Button\r\n                  size=\"small\"\r\n                  variant=\"outlined\"\r\n                  color=\"primary\"\r\n                  onClick={(e) => { addValues() }}\r\n                >\r\n                  + ADD\r\n                </Button>\r\n\r\n              </TableCell>\r\n            </TableRow>\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n    )\r\n  }\r\n\r\n  const handleTransactionDataSubmit = () => {\r\n    console.log(\"Participants: \", allNames, \" transactions: \", items)\r\n    const data = {\r\n      nodes: generateNodes(),\r\n      links: generateLinks(),\r\n    }\r\n    const config = {\r\n      freezeAllDragEvents: true,\r\n      nodeHighlightBehavior: true,\r\n      node: {\r\n        color: \"lightgreen\",\r\n        highlightStrokeColor: \"blue\",\r\n        fontSize: 12,\r\n      },\r\n      link: {\r\n        highlightColor: \"lightblue\",\r\n        renderLabel: true,\r\n        labelProperty: \"amount\",\r\n        fontSize: 12,\r\n      },\r\n      directed: true,\r\n      height: 600,\r\n      width: 600,\r\n    };\r\n\r\n    setInputGraphData(data)\r\n    setInputGraphConfig(config)\r\n  }\r\n\r\n  const generateNodes = () => allNames.map(item => ({ id: item.name }))\r\n\r\n  const generateLinks = () => items.map(({ person1, person2, amount }) => ({ source: person1, target: person2, amount }))\r\n\r\n  const generateOutputLinks = (items) => items.map(({ person1, person2, amount }) => ({ source: person1, target: person2, amount }))\r\n\r\n  const splitwiseTransactions = () => {\r\n    const input = []\r\n    for (let item of items) {\r\n      input.push(new Expense(item.person1, item.person2, parseInt(item.amount)))\r\n    }\r\n    const output = splitwise(input)\r\n    console.log('output: ', output)\r\n    setOutputList(output)\r\n    setOutputGraphData({ nodes: generateNodes(), links: generateOutputLinks(output) })\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"name-component\">\r\n        <div className=\"p-name\">\r\n          <h2>Enter names of People in the group</h2>\r\n          <div className=\"p-name-field\">\r\n            <TextField id=\"outlined-basic\" label=\"Name\"\r\n              variant=\"outlined\"\r\n              value={name}\r\n              disabled={flag}\r\n              onChange={handleChange} />\r\n          </div>\r\n          <Button variant=\"contained\"\r\n            color=\"primary\"\r\n            onClick={addParticipant}\r\n          >\r\n            Add\r\n                </Button>\r\n        </div>\r\n        {allNames && allNames.length ? (\r\n          <>\r\n            <div className=\"list-div\">\r\n              <div className=\"list-all-names\">\r\n                {listOfNames()}\r\n              </div>\r\n            </div>\r\n            <Button variant=\"contained\" color=\"secondary\" onClick={handleOpenForm}>Submit</Button>\r\n          </>\r\n        ) : null}\r\n\r\n      </div>\r\n\r\n      {flag ? (\r\n        <>\r\n          <Grid container>\r\n            <Grid item xs={12} md={6}>\r\n              <div>\r\n                <div>\r\n                  <h4>Transactions</h4>\r\n                  <div style={{ textAlign: \"left\" }}>\r\n                    <p>Enter transactions in the table below :-</p>\r\n                    <ol>\r\n                      <li>Enter the names of the Payer in first column</li>\r\n                      <li>Enter the names of the Payee in second column</li>\r\n                      <li>Enter the amount paid in the third column</li>\r\n                      <li>Click on Build Graph to build a graph from the given transactions</li>\r\n                      <li>Click on Simplify payments button when you are done with entering the payments.</li>\r\n                    </ol>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div className=\"form\">\r\n                {flag && myForm()}\r\n              </div>\r\n\r\n              {items && items.length ? (\r\n                <div className=\"form-names\">\r\n                  <Button variant=\"contained\" color=\"primary\" onClick={handleTransactionDataSubmit}>Build Graph</Button>\r\n                  <Button variant=\"contained\" color=\"secondary\" onClick={splitwiseTransactions}>Simplify Settlements</Button>\r\n                </div>\r\n              ) : null}\r\n            </Grid>\r\n\r\n            <Grid item xs={12} md={6}>\r\n              {Object.keys(inputGraphData).length && Object.keys(inputGraphConfig).length ? (\r\n                <>\r\n                  <h5>Generated graph from the transactions entered</h5>\r\n                  <Graph\r\n                    id=\"graph-id\" // id is mandatory\r\n                    data={inputGraphData}\r\n                    config={inputGraphConfig}\r\n                  />\r\n                </>\r\n              ) : null}\r\n            </Grid>\r\n          </Grid>\r\n\r\n          <Grid container>\r\n            <Grid item xs={12} md={6}>\r\n              {\r\n                outputList && outputList.length ? (\r\n                  <>\r\n                    <h3> Simplified Settlement</h3>\r\n                    <TableContainer component={Paper} className=\"table\">\r\n                      <Table aria-label=\"simple table\">\r\n                        <TableHead>\r\n                          <TableRow>\r\n                            <TableCell align=\"center\">Payer</TableCell>\r\n                            <TableCell align=\"center\">Payee</TableCell>\r\n                            <TableCell align=\"center\">Amount</TableCell>\r\n                          </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                          {outputList.length && outputList.map((row) => (\r\n                            <TableRow key={row.name}>\r\n                              <TableCell component=\"th\" align=\"center\" scope=\"row\">\r\n                                {row.person1}\r\n                              </TableCell>\r\n                              <TableCell align=\"center\">{row.person2}</TableCell>\r\n                              <TableCell align=\"center\">{row.amount}</TableCell>\r\n                            </TableRow>\r\n                          ))}\r\n                        </TableBody>\r\n                      </Table>\r\n                    </TableContainer>\r\n                  </>\r\n                ) : null\r\n              }\r\n            </Grid>\r\n            <Grid item xs={12} md={6}>\r\n              {\r\n                Object.keys(outputGraphData).length && Object.keys(inputGraphConfig).length ? (\r\n                  <>\r\n                    <h5>Graph generated from the solution of algorithm</h5>\r\n                    <Graph\r\n                      id=\"graph-id-output\" // id is mandatory\r\n                      data={outputGraphData}\r\n                      config={inputGraphConfig}\r\n                    />\r\n                  </>\r\n                ) : null\r\n              }\r\n            </Grid>\r\n          </Grid>\r\n        </>\r\n      ) : null}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Home","import React from 'react'\r\nimport './App.css';\r\nimport Home from './Component/Home';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Home />\r\n      {/* <Demo /> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}